type Initialized @entity(immutable: true) {
  id: Bytes!
  version: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SelectDataWorkers @entity(immutable: true) {
  id: Bytes!
  dataId: Bytes! # bytes32
  workerIds: [Bytes!]! # bytes32[]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type WorkerRegistry @entity(immutable: true) {
  id: Bytes!
  workerId: Bytes! # bytes32
  workerType: Int! # uint8
  owner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type DataInfo @entity {
    id: Bytes!
    dataTag: String
    tokenSymbol: String!
    price: BigInt!
    dataContent: Bytes!
    t: BigInt!
    n: BigInt!
    workerIds: [Bytes!]!
    registeredTimestamp: BigInt!
    owner: Bytes!
    status: Int!
    permissions: [Bytes!]!
    purchaseCount: Int!
}

type TaskInfo @entity {
    id: Bytes!
    taskType: Int!
    consumerPk: Bytes!
    tokenSymbol: String!
    dataId: Bytes!
    price: BigInt!
    t: BigInt!
    n: BigInt!
    workerIds: [Bytes!]!
    results: [Bytes!]!
    hasReported: [Boolean!]!
    reportCount: BigInt!
    time: BigInt!
    status: Int!
    submitter: Bytes!
    code: Bytes
}

type DataCounter @entity {
    id: String!
    validCount: Int
    deletedCount: Int
}

type TaskCounter @entity {
    id: String!
    pendingCount: Int
    completedCount: Int
    failedCount: Int
}

type FeeTokenInfo @entity {
    id: String!
    symbol: String!
    tokenAddress: Bytes!
    computingPrice: BigInt!
}
