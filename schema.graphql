type Initialized @entity(immutable: true) {
  id: Bytes!
  version: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SelectDataWorkers @entity(immutable: true) {
  id: Bytes!
  dataId: Bytes! # bytes32
  workerIds: [Bytes!]! # bytes32[]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type WorkerRegistry @entity(immutable: true) {
  id: Bytes!
  workerId: Bytes! # bytes32
  workerType: Int! # uint8
  owner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type DataDeleted @entity(immutable: true) {
  id: Bytes!
  dataId: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type DataPrepareRegistry @entity(immutable: true) {
  id: Bytes!
  dataId: Bytes! # bytes32
  publicKeys: [Bytes!]! # bytes[]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type DataRegistered @entity(immutable: true) {
  id: Bytes!
  dataId: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RouterUpdated @entity(immutable: true) {
  id: Bytes!
  oldRouter: Bytes! # address
  newRouter: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type FeeLocked @entity(immutable: true) {
  id: Bytes!
  taskId: Bytes! # bytes32
  tokenSymbol: String! # string
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type FeeSettled @entity(immutable: true) {
  id: Bytes!
  taskId: Bytes! # bytes32
  tokenSymbol: String! # string
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type FeeTokenAdded @entity(immutable: true) {
  id: Bytes!
  tokenSymbol: String! # string
  tokenAddress: Bytes! # address
  computingPrice: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type FeeTokenDeleted @entity(immutable: true) {
  id: Bytes!
  tokenSymbol: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type FeeTokenUpdated @entity(immutable: true) {
  id: Bytes!
  tokenSymbol: String! # string
  tokenAddress: Bytes! # address
  computingPrice: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type FeeUnlocked @entity(immutable: true) {
  id: Bytes!
  taskId: Bytes! # bytes32
  tokenSymbol: String! # string
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TokenTransfered @entity(immutable: true) {
  id: Bytes!
  from: Bytes! # address
  tokenSymbol: String! # string
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TokenWithdrawn @entity(immutable: true) {
  id: Bytes!
  to: Bytes! # address
  tokenSymbol: String! # string
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type ResultReported @entity(immutable: true) {
  id: Bytes!
  taskId: Bytes! # bytes32
  worker: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TaskCompleted @entity(immutable: true) {
  id: Bytes!
  taskId: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TaskDispatched @entity(immutable: true) {
  id: Bytes!
  taskId: Bytes! # bytes32
  workerIds: [Bytes!]! # bytes32[]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TaskFailed @entity(immutable: true) {
  id: Bytes!
  taskId: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TaskReportTimeoutUpdated @entity(immutable: true) {
  id: Bytes!
  timeout: BigInt! # uint64
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
